/* Gaurav Ramesh Datta
 * 201676662
 * Dr James Mclaughlan and Dr Joshua Freeman
 * School of Electronic and Electrical Engineering
 * University of Leeds
 *  */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics. (Edited by Gaurav R Datta, as a part of individual project)
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
#include "main.h"
#include <stdio.h>
#include <string.h>

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);

uint8_t spiData[5]; // The register of peripheral from where we read data
uint8_t RF_enable[5];
uint8_t RF_test[4]; // // for 0x01:14
uint8_t RF_ctrl[6]; // for 0x07:0x04
uint8_t RF_fctrl[5]; // for 0x00:0:24
uint8_t TX_power[6]; // for 0x01:0x0C
uint8_t PAN_adr[6];  // writing PAN_ID and short address to 0x00:0C
uint8_t DX_time[6]; // for 0x00:0x2C
uint8_t CMD_dtx[1];
uint8_t CMD_trxoff[1];
uint8_t TX_time[8]; // for 0x00:0x74
uint8_t PLL_cfg[4]; // for 0x09 reading/ writing PLL configurations
uint8_t seq_ctrl[5]; // for 0x11:0x08 writing aintit2idle and forceto2init
uint8_t sys_clk[5]; // for 0x11:0x04 setting Sys_clk to fast_RC and LED clock
uint8_t sys_cfg[3]; // for 0x00:10 -> to set phr mode etc.
uint8_t sys_state[3]; // for 0x0F:0x30 system state check (transfer or idle mode etc)
uint8_t sys_status[4]; // for 0x00:0x44 system status
uint8_t AON_cfg[3]; // for setting up the wake up pin in AON_config
uint8_t TX_buffer[127]; // Transmission buffer MAX = 127 bytes
uint8_t CMD_tx[1];
uint8_t LED_ctrl[4]; // for 0x11:0x16
uint8_t GPIO_mode[4]; // for 0x05:0x00
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  char uart_buf[50]; // buffer for uart communication to PC
  int uart_buf_len;


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();

  // CS pin should be default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // we set chip select pin as high
  HAL_Delay(10); // 10 ms delay

  // print to terminal to make sure everything is working
  uart_buf_len = sprintf(uart_buf,"DWM Testing\r\n");
  HAL_UART_Transmit(&huart2,(uint8_t *)uart_buf,uart_buf_len,100);

  // Set the DWM awake from sleep/deep sleep mode by using WAKEup pin
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  AON_cfg[0] = 0xD4; // first octet header for writing
  AON_cfg[1] = 0x50; // second octet header
  AON_cfg[2] = 0x10; // the first LS Byte set to |0|0|0|1|0|0|0|0|
  HAL_SPI_Transmit(&hspi1,AON_cfg,3,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(3000); // 3 second

  // Writing to 0x11:0x08: sequence control register (this is for setting the module to PLL mode)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
  seq_ctrl[0] = 0xE2; // first octet header for writing
  seq_ctrl[1] = 0x20; // second octet header
  seq_ctrl[2] = 0x38; // the first LS Byte
  seq_ctrl[3] = 0x07;
  HAL_SPI_Transmit(&hspi1,seq_ctrl,4,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(3000); // 3 second

  // The controller is now at IDLE_PLL ; the clock runs at 125 MHz PLL frequency
  // Writing 0x1F3C to 09:00
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
  PLL_cfg[0] = 0xD2; // first octet header for writing
  PLL_cfg[1] = 0x00; // second octet header
  PLL_cfg[2] = 0x3C; // the first LS Byte
  PLL_cfg[3] = 0x1F;
  HAL_SPI_Transmit(&hspi1,PLL_cfg,4,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(3000); // 3 second

  // Reading 0x09:00 PLL configuration address
  //Read the data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  PLL_cfg[0] = 0x52; // first octet header for reading
  PLL_cfg[1] = 0x00; // second octet header
  HAL_SPI_Transmit(&hspi1,PLL_cfg,2,10);
  HAL_SPI_Receive(&hspi1,&PLL_cfg[2],2,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms

  // We read the status registers 0x00:0x44
  // We check LSbit cplock=1
  // if cplock = 1, the device is running at PLL frequency
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  sys_status[0] = 0x41; // first octet header for reading
  sys_status[1] = 0x10; // second octet header

  HAL_SPI_Transmit(&hspi1,sys_status,2,10);
  HAL_SPI_Receive(&hspi1,&sys_status[2],1,10); // we store the 8-bit data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms


  /*
   * READING FROM DWM
  */

  for (int i = 1; i <= 4;i++)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line

	  // 2. We transmit register address
	  spiData[0] = (0x0); //
	  HAL_SPI_Transmit(&hspi1,spiData,i,10); // spiData is the register address from where we read data

	  // 3. Read the data
	  HAL_SPI_Receive(&hspi1,&spiData[i],i,10); // we store the 8-bit data in spiData[1]

	  // 4. We pull up the chip select line to stop the transmission
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

	  HAL_Delay(100); // 100 ms
  }

  // printing through UART

  uart_buf_len = sprintf(uart_buf,"0x%02x    0x%02x    0x%02x    0x%02x\r\n",(unsigned int)spiData[4],(unsigned int)spiData[3],(unsigned int)spiData[2],(unsigned int)spiData[1]);
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buf,uart_buf_len,100);

  //LED control settings:
  // Writing to 0x11:16 to enable the LED GPIO clock
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
  LED_ctrl[0] = 0xE2; // first octet header for writing
  LED_ctrl[1] = 0x58; // second octet header
  LED_ctrl[2] = 0x20; // the first LS Byte
  LED_ctrl[3] = 0x01;
  HAL_SPI_Transmit(&hspi1,LED_ctrl,4,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  //Reading the 0x11:16 register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  LED_ctrl[0] = 0x62; // first octet header for reading
  LED_ctrl[1] = 0x00; // second octet header
  HAL_SPI_Transmit(&hspi1,LED_ctrl,2,10);
  HAL_SPI_Receive(&hspi1,&LED_ctrl[2],2,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms

  // We make GPIO0 TX_led blink 0x05:00 LSBits 0->2
  // Value to be put = 0x02
  // This value blinks when the Device is at TX_mode
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
  GPIO_mode[0] = 0xCA; // first octet header for writing
  GPIO_mode[1] = 0x00; // second octet header
  GPIO_mode[2] = 0x48; //
  GPIO_mode[3] = 0x02;
  HAL_SPI_Transmit(&hspi1,GPIO_mode,4,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  /*
   * Setting up RF channel settings
   */

  // Write procedure for 0x01:0x14 RF_channel control
  // This sets the SFD bits to 00; for 802.15.4 IEEE standard
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  RF_test[0] = 0xC2; // first octet header for writing
  RF_test[1] = 0x50; // second octet header
  RF_test[2] = 0x48;
  RF_test[3] = 0x9;
  HAL_SPI_Transmit(&hspi1,RF_test,4,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  // Write Procedure for 0x07:0x1C sets the PG delay value
  // PG delay sets the bandwidth
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  RF_ctrl[0] = 0xCE; // first octet header for writing
  RF_ctrl[1] = 0x70; // second octet header

  RF_ctrl[2] = 0x34; // the first LS Byte
  RF_ctrl[3] = 0x11;
  RF_ctrl[4] = 0x07;
  RF_ctrl[5] = 0x1C;
  HAL_SPI_Transmit(&hspi1,RF_ctrl,6,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  // Write Procedure for 0x00:0x24 TX_FCTRL register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  RF_fctrl[0] = 0xC0; // first octet header for writing
  RF_fctrl[1] = 0x90; // second octet header 0x24
  RF_fctrl[2] = 0x7F; // the first LS Byte 127 bytes
  RF_fctrl[3] = 0x1C; // preamble length = 64
  RF_fctrl[4] = 0x0; // TXB_OFFSET = 0;
  HAL_SPI_Transmit(&hspi1,RF_fctrl,5,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  //Read the data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  RF_fctrl[0] = 0x40; // first octet header for reading
  RF_fctrl[1] = 0x90; // second octet header
  HAL_SPI_Transmit(&hspi1,RF_fctrl,2,10); // spiData is the register address from where we read data
  HAL_SPI_Receive(&hspi1,&RF_fctrl[2],3,10); // we store the 8-bit data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms

  // printing through UART

  uart_buf_len = sprintf(uart_buf,"0x%02x    0x%02x    0x%02x\r\n",(unsigned int)RF_fctrl[4],(unsigned int)RF_fctrl[3],(unsigned int)RF_fctrl[2]);
  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buf,uart_buf_len,100);

  // Writing 0x00:0x10
  // This register sets the PHR mode in system configuration
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  sys_cfg[0] = 0xC0; // first octet header for reading
  sys_cfg[1] = 0x40; // second octet header
  sys_cfg[2] = 0x81;
  HAL_SPI_Transmit(&hspi1,sys_cfg,3,10); // spiData is the register address from where we read data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms

  // Reading 0x01:0x0C
  // The power setting is kept default to -5 dB
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to read from DWM, we pull down the CS line
  TX_power[0] = 0x42; // first octet header for reading
  TX_power[1] = 0x30; // second octet header

  HAL_SPI_Transmit(&hspi1,TX_power,2,10);
  HAL_SPI_Receive(&hspi1,&TX_power[2],4,10); // we store the 8-bit data
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100); // 100 ms

  // FROM DWM3000 file from Qorvo.com (formerly decawave) This is a standard operating procedure.
  /* The frame sent in this example is an 802.15.4e standard blink. It is a 12-byte frame composed of the following fields:
   *     - byte 0: frame type (0xC5 for a blink).
   *     - byte 1: sequence number, incremented for each new frame.
   *     - byte 2 -> 9: device ID, see NOTE 1 below.
   */

  static uint8_t tx_msg[] = { 0xC5, 0, 'Q', 'O', 'R', 'V', 'T', 'E', 'S', 'T' };

  //We write ShortADDR and PAN_ID

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
  PAN_adr[0] = 0xC0; // first octet header for writing
  PAN_adr[1] = 0x30; // second octet header 0x24
  PAN_adr[2] = 0xFF; // the first LS Byte
  PAN_adr[3] = 0xFF;
  PAN_adr[4] = 0xFF;
  PAN_adr[5] = 0xFF;
  HAL_SPI_Transmit(&hspi1,PAN_adr,6,10);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(100);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // We write the DATA PACKET TO THE TRANSMIT BUFFER 0x14
	  //We write our FRAME DATA to the TX_Buffer
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line

	    TX_buffer[tx_msg[0]] = 0xC5; // first octet header for writing
	    TX_buffer[tx_msg[1]] = 0;    // Frame sequence counter which increments
	    TX_buffer[tx_msg[2]] = 'Q';
	    TX_buffer[tx_msg[3]] = 'O';
	    TX_buffer[tx_msg[4]] = 'R';
	    TX_buffer[tx_msg[5]] = 'V';
	    TX_buffer[tx_msg[6]] = 'T';
	    TX_buffer[tx_msg[7]] = 'E';
	    TX_buffer[tx_msg[8]] = 'S';
	    TX_buffer[tx_msg[9]] = 'T';
	    //TX_buffer[tx_msg[13]] = 0;   // Auto appended
	    //TX_buffer[tx_msg[14]] = 0;   // Auto appended
	    HAL_SPI_Transmit(&hspi1,TX_buffer,10,10);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	    HAL_Delay(100);

	//START TRANSMISSION
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
	    //START Transmission : fast command - 0x01
	    CMD_tx[1] = 0x01; //[1|0|0|0|0|0|1|1]
	    HAL_SPI_Transmit(&hspi1,CMD_tx,1,10);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
	    HAL_Delay(100);

	 // We clear the TXFRS bit in 0x00:44 after one frame is sent
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // to write to DWM, we pull down the CS line
	    sys_status[0] = 0xC1;
	    sys_status[1] = 0x10;
	    sys_status[2] = 0x80; // bit 7 is set to zero
	    HAL_SPI_Transmit(&hspi1,sys_status,3,10);
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

     // 500 ms delay for every frame sent
	    HAL_Delay(500);

	 tx_msg[1]++;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
 * The below functions are Intellectual Property of STMicroelectronics
 * They are default built-in functions that are universal for any embedded program
 *  - Gaurav R Datta
 */

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WAKEUP_GPIO_Port, WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
